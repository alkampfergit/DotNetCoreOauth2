using DotNetCoreOAuth2;
using MailKit;
using MailKit.Net.Imap;
using MailKit.Security;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using System.Text;

namespace WebAppTest.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class OAuth2Controller : ControllerBase
    {
        private static Oauth2Token? _lastToken = null;

        private readonly CodeFlowHelper _codeFlowHelper;
        private readonly WellKnownConfigurationHandler _wellKnownConfigurationHandler;
        private readonly IOptionsMonitor<OAuth2Settings> _oauth2Settings;
        private readonly IHttpClientFactory _httpClientFactory;

        static OAuth2Controller()
        {
            if (System.IO.File.Exists("lasttoken.txt"))
            {
                var text = System.IO.File.ReadAllText("lasttoken.txt");
                _lastToken = JsonConvert.DeserializeObject<Oauth2Token>(text);
            }
        }

        public OAuth2Controller(
            CodeFlowHelper codeFlowHelper,
            WellKnownConfigurationHandler wellKnownConfigurationHandler,
            IOptionsMonitor<OAuth2Settings> oauth2Settings,
            IHttpClientFactory httpClientFactory)
        {
            _codeFlowHelper = codeFlowHelper;
            _wellKnownConfigurationHandler = wellKnownConfigurationHandler;
            _oauth2Settings = oauth2Settings;
            _httpClientFactory = httpClientFactory;
        }

        [HttpGet]
        [Route("trigger-login")]
        public async Task<IActionResult> TriggerLogin()
        {
            OAuth2Client oAuth2Client = CreateOAuth2Client();
            //"openid profile offline_access email https://graph.microsoft.com/IMAP.AccessAsUser.All",
            //"openid profile offline_access email https://outlook.office.com/IMAP.AccessAsUser.All",
            //"openid email offline_access https://graph.microsoft.com/.default",

            var relativeUrl = Url.Action("GetToken", "OAuth2")!;
            var redirectUrl = $"{Request.Scheme}://{Request.Host}{Request.PathBase}/{relativeUrl.TrimStart('/')}";
            var codeChallengeUrl = await oAuth2Client.GenerateUrlForCodeFlowAsync(
                "openid offline_access https://outlook.office.com/IMAP.AccessAsUser.All",
                redirectUrl,
                new Dictionary<string, string>());

            // In a real world, this will return a redirect to the code challenge url so that
            // the user will be immediately prompted with a login page.
            return Ok(codeChallengeUrl);
        }

        /// <summary>
        /// Standard handler that will receive code_challenge data in querystring
        /// and will perform POST request to obtain token.
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Route("get-token")]
        public async Task<IActionResult> GetToken()
        {
            OAuth2Client oAuth2Client = CreateOAuth2Client();
            var tokenRequest = await oAuth2Client.GenerateTokenRequestAsync(Request.QueryString.Value!, _oauth2Settings.CurrentValue.ClientSecret);

            var client = _httpClientFactory.CreateClient("default");
            var response = await client.SendAsync(tokenRequest.Request);
            if (!response.IsSuccessStatusCode)
            {
                string error = "";
                if (response.Content != null)
                {
                    error = (await response.Content.ReadAsStringAsync()) ?? "";
                }
                return StatusCode(500, $"Internal error: {error}");
            }

            await UpdateTokenFromResponse(response);
            return Ok(_lastToken);
        }

        /// <summary>
        /// Try to login to office365 with IMAP and XOAUTH2, also will return a autogenerated
        /// valid XOAUTH2 token to try to use with openssl or other program.
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("office-365-get-mail")]
        public async Task<IActionResult> GetMail(string emailAddress)
        {
            if (_lastToken == null)
            {
                return StatusCode(500, "No token available");
            }

            if (_lastToken.ExpireAtUtc < DateTime.UtcNow.AddMinutes(2))
            {
                //we need to refresh token
                OAuth2Client oAuth2Client = CreateOAuth2Client();
                var request = await oAuth2Client.GenerateTokenRefreshRequestAsync(
                    _lastToken,
                    _oauth2Settings.CurrentValue.ClientSecret);

                var client = _httpClientFactory.CreateClient("default");
                var response = await client.SendAsync(request);
                if (!response.IsSuccessStatusCode)
                {
                    string error = "";
                    if (response.Content != null)
                    {
                        error = (await response.Content.ReadAsStringAsync()) ?? "";
                    }
                    return StatusCode(500, $"Internal error Refreshing token: {error}");
                }

                await UpdateTokenFromResponse(response);
            }

            await AccessWithMimeKit(_lastToken.AccessToken, emailAddress);

            var accessToken = _lastToken.AccessToken;
            var rawXOAUTH2 = CreateRawXOAUTH2Token(emailAddress, accessToken);

            return Ok(new { AuthString = rawXOAUTH2 });
        }

        /// <summary>
        /// Try to login to office365 with IMAP and XOAUTH2 but using client-flow
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("office-365-get-mail-client-flow")]
        public async Task<IActionResult> GetMailClientFlow(string emailAddress)
        {
            OAuth2Client oAuth2Client = CreateOAuth2Client();
            var request = await oAuth2Client.GenerateTokenRequestForClientFlowAsync(
                _oauth2Settings.CurrentValue.Authority,
                "https://outlook.office365.com/.default",
                _oauth2Settings.CurrentValue.ClientSecret);

            var client = _httpClientFactory.CreateClient("default");
            var response = await client.SendAsync(request);
            if (!response.IsSuccessStatusCode)
            {
                string error = "";
                if (response.Content != null)
                {
                    error = (await response.Content.ReadAsStringAsync()) ?? "";
                }
                return StatusCode(500, $"Internal error: {error}");
            }

            var stringResponse = await response.Content.ReadAsStringAsync();
            var obj = JsonConvert.DeserializeAnonymousType(stringResponse, new
            {
                access_token = ""
            })!;

            await AccessWithMimeKit(obj.access_token, emailAddress);

            var rawXOAUTH2 = CreateRawXOAUTH2Token(emailAddress, obj.access_token);

            return Ok(new { AuthString = rawXOAUTH2 });
        }

        private OAuth2Client CreateOAuth2Client()
        {
            OAuth2Client oAuth2Client = new OAuth2Client(
                _codeFlowHelper,
                _wellKnownConfigurationHandler,
                _oauth2Settings.CurrentValue.Authority,
                _oauth2Settings.CurrentValue.ClientId);
            return oAuth2Client;
        }

        private static string CreateRawXOAUTH2Token(string emailAddress, string accessToken)
        {
            using var ms = new MemoryStream(accessToken.Length + 200);
            using var bw = new BinaryWriter(ms);
            bw.Write(Encoding.ASCII.GetBytes("user="));
            bw.Write(Encoding.ASCII.GetBytes(emailAddress));
            bw.Write((byte)1);
            bw.Write(Encoding.ASCII.GetBytes("auth=Bearer "));
            bw.Write(Encoding.ASCII.GetBytes(accessToken));
            bw.Write((byte)1);
            bw.Write((byte)1);

            return Convert.ToBase64String(ms.ToArray());
        }

        private static async Task UpdateTokenFromResponse(HttpResponseMessage response)
        {
            var stringResponse = await response.Content.ReadAsStringAsync();
            _lastToken = Oauth2Token.DeserializeFromTokenResponse(stringResponse);
            await System.IO.File.WriteAllTextAsync("lasttoken.txt", JsonConvert.SerializeObject(_lastToken));
        }

        private static async Task AccessWithMimeKit(string accessToken, string emailAddress)
        {
            var oauth2_1 = new SaslMechanismOAuth2(emailAddress, accessToken);

            using (var newClient = new ImapClient(new ProtocolLogger(Console.OpenStandardOutput())))
            {
                await newClient.ConnectAsync("outlook.office365.com", 993, SecureSocketOptions.SslOnConnect);
                await newClient.AuthenticateAsync(oauth2_1);

                //// you can now interact with the email.
                //var folder = newClient.GetFolder("archive-to-jarvis");
                //folder.Open(MailKit.FolderAccess.ReadWrite);
                //var query = SearchQuery.NotSeen;
                //var uidList = folder.Search(query)
                //    .Take(1000).ToList();
            }
        }
    }
}